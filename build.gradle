
import net.fabricmc.loom.task.RemapJarTask

plugins {
	id 'fabric-loom' version '0.2.7-SNAPSHOT'
	id 'maven-publish'
	id 'com.matthewprenger.cursegradle' version '1.4.0'
	id 'com.github.breadmoirai.github-release' version '2.2.10'
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

minecraft {
}

sourceSets {
	api
}

processResources {
	inputs.property "version", project.version

	from(sourceSets.main.resources.srcDirs) {
		include "fabric.mod.json"
		expand "version": project.version
	}

	from(sourceSets.main.resources.srcDirs) {
		exclude "fabric.mod.json"
	}
}

// ensure that the encoding is set to UTF-8, no matter what the system default is
// this fixes some edge cases with special characters not displaying correctly
// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
tasks.withType(JavaCompile) {
	options.encoding = "UTF-8"
}

// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
// if it is present.
// If you remove this task, sources will not be generated.
task sourcesJar(type: Jar, dependsOn: classes) {
	classifier = "sources"
	from sourceSets.main.allSource
}

task apiJar(type: Jar, dependsOn: apiClasses) {
	classifier = 'api-dev'
	from (sourceSets.api.output) {
		include "fabric.mod.json"
		expand "version": project.version
	}
	from (sourceSets.api.output) {
		exclude "fabric.mod.json"
	}
	from 'LICENSE'
}

task remapApiJar(type: RemapJarTask, dependsOn: project.apiJar) {
	input = apiJar.archivePath
	classifier = 'api'
	addNestedDependencies = false
}

remapJar.dependsOn remapApiJar

jar {
	from "LICENSE"
}

repositories {
	maven {
		url 'https://jitpack.io/'
	}
}

dependencies {
	//to change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modCompile "com.github.Earthcomputer:fabric-loader:${project.loader_version}"
	sourceSets.api.compileClasspath += files({sourceSets.main.compileClasspath.toList()})

	modCompile("net.fabricmc.fabric-api:fabric-resource-loader-v0:${project.resource_loader_version}") {
		transitive = false // to stop it using its own fabric-loader
	}
	include "net.fabricmc.fabric-api:fabric-resource-loader-v0:${project.resource_loader_version}"

	compile sourceSets.api.output
	include files(remapApiJar.archivePath)

	testCompile 'org.junit.jupiter:junit-jupiter-api:5.5.2'
	testRuntimeOnly 'com.github.Earthcomputer.junit5:junit-jupiter-engine:8785ac4d'
	testCompile 'org.mockito:mockito-all:1.10.19'
}

test {
	useJUnitPlatform()
	systemProperty 'junit.jupiter.extensions.autodetection.enabled', 'true'
	systemProperty 'org.junit.TestClassResolver', 'net.earthcomputer.multiconnect.TestingExtension'
	workingDir 'run'
}

def myCredentials = new Properties()
try {
	myCredentials.load(new FileReader(file('myCredentials.properties')))
} catch (IOException ignore) {
	myCredentials = null
}
def isBeta = version.contains 'pre'

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			// add all the jars that should be included when publishing to maven
			artifact(remapJar) {
				builtBy remapJar
			}
			artifact(sourcesJar) {
				builtBy remapSourcesJar
			}
			artifact(remapApiJar) {
				builtBy remapApiJar
			}
		}
	}

	// select the repositories you want to publish to
	repositories {
		maven {
			url 'https://api.bintray.com/maven/earthcomputer/mods/multiconnect/'
			credentials {
				username = myCredentials == null ? 'foo' : myCredentials['bintrayUser']
				password = myCredentials == null ? 'bar' : myCredentials['bintrayPass']
			}
		}
		// uncomment to publish to the local maven
		// mavenLocal()
	}
}

curseforge {
	apiKey = myCredentials == null ? 'baz' :  myCredentials['curseForgeKey']

	project {
		id = '336018'
		changelog = file('changelog.txt')
		releaseType = isBeta ? 'beta' : 'release'
		addGameVersion project.minecraft_version
		addGameVersion 'Fabric'
		mainArtifact remapJar.archivePath
		afterEvaluate {
			uploadTask.dependsOn remapJar
		}
	}

	options {
		forgeGradleIntegration = false
	}

}

githubRelease {
	token(myCredentials == null ? 'derp' : myCredentials['githubKey'])
	owner 'Earthcomputer'
	repo 'multiconnect'
	tagName("v$version")
	releaseName("Version $version for Minecraft ${project.minecraft_version}")
	body(file('changelog.txt').getText('UTF-8'))
	prerelease isBeta
	releaseAssets remapJar.archivePath
}
tasks.getByName('githubRelease').dependsOn remapJar

task releaseAll {
	dependsOn publish
	dependsOn curseforge
	dependsOn githubRelease
}
